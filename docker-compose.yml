version: "3"

services:
#  namenode:
#    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
#    container_name: namenode
#    restart: always
#    ports:
#      - 9870:9870
#      - 8020:8020
#    volumes:
#      - hadoop_namenode:/hadoop/dfs/name
#    environment:
#      - CLUSTER_NAME=test
#    env_file:
#      - ./hadoop.env
#
#  datanode:
#    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
#    container_name: datanode
#    restart: always
#    volumes:
#      - hadoop_datanode:/hadoop/dfs/data
#    environment:
#      SERVICE_PRECONDITION: "namenode:9870"
#    env_file:
#      - ./hadoop.env
#
#  resourcemanager:
#    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
#    container_name: resourcemanager
#    restart: always
#    environment:
#      SERVICE_PRECONDITION: "namenode:8020 namenode:9870 datanode:9864"
#    env_file:
#      - ./hadoop.env
#
#  nodemanager1:
#    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
#    container_name: nodemanager
#    restart: always
#    environment:
#      SERVICE_PRECONDITION: "namenode:8020 namenode:9870 datanode:9864 resourcemanager:8088"
#    env_file:
#      - ./hadoop.env
#
#  historyserver:
#    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
#    container_name: historyserver
#    restart: always
#    environment:
#      SERVICE_PRECONDITION: "namenode:8020 namenode:9870 datanode:9864 resourcemanager:8088"
#    volumes:
#      - hadoop_historyserver:/hadoop/yarn/timeline
#    env_file:
#      - ./hadoop.env

  zookeeper:
    image: confluentinc/cp-zookeeper:5.2.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'false'

      
#  spark-master:
#   image: bde2020/spark-master:2.4.5-hadoop2.7
#    container_name: spark-master
#    ports:
#      - "8080:8080"
#      - "7077:7077"
#    environment:
#      - INIT_DAEMON_STEP=setup_spark
#  spark-worker-1:
#    image: bde2020/spark-worker:2.4.5-hadoop2.7
#    container_name: spark-worker-1
#    depends_on:
#      - spark-master
#    ports:
#      - "8081:8081"
#    environment:
#      - "SPARK_MASTER=spark://spark-master:7077"

  pyspark-notebook:
    image: jupyter/pyspark-notebook
    container_name: jupyter
    ports:
      - 8888:8888
      - 4040:4040
      - 4041:4041

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      - cluster.initial_master_nodes=elasticsearch
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"

  kibana:
    image: docker.elastic.co/kibana/kibana:7.7.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      SERVER_NAME: kibana
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch

  datagov-producer:
    build: .
    image: poei-projet:latest
    container_name:  datagov-producer
    command: start_producer
    depends_on:
      - elasticsearch
      - kafka

  datagov-consumer-covid:
    build: .
    image: poei-projet:latest
    container_name:  datagov-consumer-covid
    command: start_consumer_covid
    depends_on:
      - elasticsearch
      - kafka

  datagov-consumer-echeance:
    build: .
    image: poei-projet:latest
    container_name:  datagov-consumer-echeance
    command: start_consumer_echeance
    depends_on:
      - elasticsearch
      - kafka

volumes:
  hadoop_namenode:
  hadoop_datanode:
  hadoop_historyserver: